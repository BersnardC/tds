{"version":3,"sources":["views/tables/tables.js","views/tables/Link.js","views/tables/LinkList.js","views/tables/atables.js","App.js","serviceWorker.js","index.js"],"names":["Tables","props","state","componentMounted","columns","dataField","text","products","this","console","log","query","FEED_QUERY","loading","error","data","orders","className","keyField","React","Component","gql","Link","key","id","strike","exp_date","LinkList","linksToRender","map","link","call_put","Tprice","useState","xcolumns","xorders","groups_ready","sessionStorage","getItem","JSON","parse","includes","name","push","setItem","stringify","dt_price","orderslength","length","ultimo","cp","fecha_desde","trade_date","time","fecha_hasta","useQuery","INTRA_DAY_PRICE","intradays","intraday_price_action","i","price","_aux_time","substring","dt_orders","intra_length","j","close","dtimes_process","dt_orders_process","position","accum_value","order","action","quantity","value","toFixed","c_pnl","current_pnl","date_process","some","e","TResumen","current","ycolumns","xrows","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","showTable","pos","indexOf","all_dt","all_orders","n_dt","n_ao","running_pnl","parseFloat","splited","split","obj","options","title","display","fontSize","legend","dt_init","dt_end","ATables","groups","dataGroups","filldata","iPrices","client","useApolloClient","useEffect","then","result","catch","err","nlength","_aux","hasOwnProperty","ngroups","dataGroup","fecha1","moment","diferencia","diff","new_time","add","format","fillable","is_open","concat","sort","a","b","Date","group","ApolloClient","uri","ORDERS_QUERY","About","fecha2","Welcome","About2","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ad3bac85.chunk.js","sourcesContent":["import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport {gql} from 'apollo-boost';\r\nimport { Query } from 'react-apollo'\r\n//import { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\r\n\r\nclass Tables extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcomponentMounted: false,\r\n\t      \tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproducts: [\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t    this.state.componentMounted = true;\r\n\t    console.log(this.state.componentMounted);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t    console.log('Chao')\r\n  \t}\r\n  \tUNSAFE_componentWillUpdate() {\r\n  \t\tconsole.log('LLegue aqui')\r\n  \t}\r\n\r\n\trender() {\r\n\t    return (\r\n\t      \t<Query query={FEED_QUERY}>\r\n\t        {({ loading, error, data }) => {\r\n\t          \tif (loading) return <div>Buscando data</div>\r\n\t          \tif (error) return <div>Ha ocurrido un error: {error}</div>\r\n\t          \tif (data) {\r\n\t\t          \t/*ordersToRender.map( order => this.state.products.push(order));\r\n\t\t          \tconsole.log('Products', this.state.products)*/\r\n\t\t          \tthis.state.products = data.orders;\r\n\t\t          \treturn (\r\n\t\t            <div className=\"container\">\r\n\t\t              <BootstrapTable keyField='id' data={ this.state.products } columns={ this.state.columns } />\r\n\t\t            </div>\r\n\t\t          )\r\n\t          \t}\r\n\t        }}\r\n\t      </Query>\r\n\t    )\r\n\t}\r\n}\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\r\n      id\r\n      strike\r\n      time\r\n      trade_date\r\n      call_put\r\n      action\r\n      exp_date\r\n      price\r\n      is_open\r\n    }\r\n  }\r\n`;\r\nexport default Tables;","import React, { Component } from 'react'\r\n\r\nclass Link extends Component {\r\n  render() {\r\n    return (\r\n        <tr key={this.props.id}>\r\n          <td> {this.props.data.strike} </td>\r\n          <td> {this.props.data.exp_date}</td>\r\n        </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Link","import React, { Component } from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport Link from './Link'\r\n\r\nclass LinkList extends Component {\r\n  render() {\r\n    return (\r\n      <Query query={FEED_QUERY}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <div>Fetching</div>\r\n          if (error) return <div>Error</div>\r\n    \t\tconsole.log(data)\r\n          const linksToRender = data.orders\r\n          return (\r\n            <div>\r\n              {linksToRender.map((link) => {\r\n              \tconsole.log(link)\r\n              \treturn <Link key={link.id} id={link.id} link={link.call_put} data={link}/>\r\n              })}\r\n            </div>\r\n          )\r\n        }}\r\n      </Query>\r\n    )\r\n  }\r\n}\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\r\n      id\r\n      strike\r\n      time\r\n      trade_date\r\n      call_put\r\n      action\r\n      exp_date\r\n      price\r\n      is_open\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LinkList","import React, { useState, useEffect } from \"react\";\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Query } from 'react-apollo'\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction ATables() {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\torders:[],\r\n\t\tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\tgroups:[],\r\n\t\tdataGroups: {},\r\n\t\tfilldata: {},\r\n\t\tiPrices:[]\r\n\t});\r\n\r\n\tconst client = useApolloClient();\r\n\r\n\tuseEffect(() => {\r\n\t\tclient\r\n\t\t    .query({\r\n\t\t      query: INTRA_DAY_PRICE('700', 'C', '2020-01-30T15:43:08Z', '2020-01-30T15:49:08Z')\r\n\t\t    })\r\n\t\t    .then(result => {\r\n\t\t    \tstate.iPrices = result.data.intraday_price_action;\r\n\t\t    \t//console.log('Prices Client', state.iPrices)\r\n\t\t    })\r\n\t\t    .catch(err => console.error(err))\r\n\t});\r\n\r\n\treturn (\r\n        <Query query={FEED_QUERY}>\r\n\t        {({ loading, error, data }) => {\r\n\t          \tif (loading) return <div>Buscando data</div>\r\n\t          \tif (error) return <div>Ha ocurrido un error: {error}</div>\r\n\t          \tif (data) {\r\n\t          \t\tlet dtimes_process = sessionStorage.getItem('dtimes_process') && JSON.parse(sessionStorage.getItem('dtimes_process')).length ? JSON.parse(sessionStorage.getItem('dtimes_process')) : [];\r\n\t          \t\tlet dt_orders_process = sessionStorage.getItem('dt_orders_process') && JSON.parse(sessionStorage.getItem('dt_orders_process')).length ? JSON.parse(sessionStorage.getItem('dt_orders_process')) : [];;\r\n\t          \t\tsessionStorage.setItem('dtimes_process', JSON.stringify(dtimes_process));\r\n\t          \t\tsessionStorage.setItem('dt_orders_process', JSON.stringify(dt_orders_process));\r\n\t          \t\t/*const ordersToRender = data.orders\r\n\t\t          \tordersToRender.map( order => state.orders.push(order));*/\r\n\t\t          \tstate.orders = data.orders;\r\n\r\n\t\t          \tlet nlength = data.orders.length;\r\n\t\t          \tfor (let i = 0; i < nlength; i++) {\r\n\t\t          \t\t//console.log('Orders n#: ',i+1);\r\n\t\t          \t\tlet _aux = state.orders[i].strike + state.orders[i].exp_date + state.orders[i].call_put;\r\n\t\t          \t\tif (!state.groups.includes(_aux)) {\r\n\t\t          \t\t\tstate.groups.push(_aux)\r\n\t\t          \t\t} \r\n\t\t          \t\t/*else {\r\n\t\t          \t\t\tif (!state.dataGroups.hasOwnProperty(_aux)) {\r\n\t\t          \t\t\t\tstate.dataGroups[_aux] = [];\r\n\t\t          \t\t\t} else{\r\n\t\t          \t\t\t\tstate.dataGroups[_aux].push(state.orders[i])\r\n\t\t          \t\t\t}\r\n\t\t          \t\t}*/\r\n\t\t          \t\tif (!state.dataGroups.hasOwnProperty(_aux)) {\r\n\t\t          \t\t\t\tstate.dataGroups[_aux] = [];\r\n\t\t          \t\t}\r\n\t\t\t\t\t\tstate.dataGroups[_aux].push(state.orders[i])\r\n\t\t          \t}\r\n\t\t          \t// Rellenando los minutos\r\n\t\t          \t// recorro los grupos disponibles\r\n\t\t          \tlet ngroups = state.groups.length;\r\n\t\t          \tsessionStorage.setItem('dt_groups_process', ngroups);\r\n\t\t          \t//console.log('Cantidad de groups:', ngroups)\r\n\t\t          \tfor (let i = 0; i < ngroups; i++) {\r\n\t\t          \t\tlet dataGroup = state.dataGroups[state.groups[i]];\r\n\t\t          \t\tstate.filldata[state.groups[i]] = [];\r\n\t\t          \t\tif (dataGroup.length) {\r\n\t\t          \t\t\tlet fecha1 = moment(dataGroup[0]['trade_date'] + ' ' + dataGroup[0]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t\tlet fecha2 = moment(dataGroup[ngroups-1]['trade_date'] + ' ' + dataGroup[ngroups-1]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t\tlet diferencia = fecha2.diff(fecha1, 'minutes');\r\n\t\t\t\t\t\t\t//console.log('diferencia', diferencia);\r\n\t\t\t\t\t\t\tfor (let j = 1; j < diferencia; j++) {\r\n\t\t\t\t\t\t\t\tlet new_time = moment(dataGroup[0].time, 'h:m:s').add(j, 'minutes').format('HH:mm:ss');\r\n\t\t\t\t\t\t\t\tlet fillable = {\r\n\t\t\t\t\t\t\t\t\tid: dataGroup[0].id + '.' + j,\r\n\t\t\t\t\t\t\t\t\tstrike: dataGroup[0].strike,\r\n\t\t\t\t\t\t\t\t\taction: dataGroup[0].action,\r\n\t\t\t\t\t\t\t\t\tcall_put: dataGroup[0].call_put,\r\n\t\t\t\t\t\t\t\t\texp_date: dataGroup[0].exp_date,\r\n\t\t\t\t\t\t\t\t\tprice: '',\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tis_open: dataGroup[0].is_open,\r\n\t\t\t\t\t\t\t\t\ttrade_date: dataGroup[0].trade_date,\r\n\t\t\t\t\t\t\t\t\ttime: new_time,\r\n\t\t\t\t\t\t\t\t\tquantity: 0\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstate.filldata[state.groups[i]].push(fillable);\r\n\t\t\t\t\t\t\t}\r\n\t\t          \t\t}\r\n\t\t          \t}\r\n\t\t          \t// A concatenar groups y fillables\r\n\t\t          \tfor (let i = 0; i < ngroups; i++) {\r\n\t\t          \t\tlet concat = state.dataGroups[state.groups[i]].concat(state.filldata[state.groups[i]]);\r\n\t\t          \t\tconcat.sort(function(a,b){\r\n\t\t\t\t\t\t  return new Date(a.trade_date + ' ' + a.time) - new Date(b.trade_date + ' ' + b.time);\r\n\t\t\t\t\t\t});\r\n\t\t          \t\tstate.dataGroups[state.groups[i]] = concat;\r\n\t\t          \t}\r\n\t\t          \t//console.log('Groups: ',state.groups);\r\n\t\t          \t//console.log('dataGroups',state.dataGroups);\r\n\t\t          \t//console.log('FillData', state.filldata);\r\n\t\t          \tif (state.iPrices.length) {\r\n\t\t          \t\treturn (\r\n\t\t\t\t            <div className=\"container\">\r\n\t\t\t\t              {state.groups.map( (group) => <BootstrapTable keyField={group} data={ state.dataGroups[group] } columns={ state.columns } />)}\r\n\t\t\t\t            </div>\r\n\t\t\t\t        )\r\n\t\t          \t} else {\r\n\t\t          \t\treturn (\r\n\t\t          \t\t\t<div className=\"container\">\r\n\t\t          \t\t\t\t{state.groups.map( (group) => <Tprice name={group} orders={ state.dataGroups[group] } />)}\r\n\t\t          \t\t\t</div>\r\n\t\t          \t\t)\r\n\t\t          \t}\r\n\t          \t}\r\n\t        }}\r\n\t    </Query>\r\n    )\r\n}\r\n\r\nfunction Tprice(props) {\r\n\t//console.log('Props',props.orders);\r\n\tconst [state, setState] = useState({\r\n\t\txcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'position',\r\n\t\t\t\t  text: 'Position'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'accum_value',\r\n\t\t\t\t  text: 'Accum Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\txorders: []\r\n\t});\r\n\tlet groups_ready = sessionStorage.getItem('groups_ready') ? JSON.parse(sessionStorage.getItem('groups_ready')) : [];\r\n\tif (!groups_ready.includes(props.name)) {\r\n\t\tgroups_ready.push(props.name);\r\n\t}\r\n\tsessionStorage.setItem('groups_ready', JSON.stringify(groups_ready));\r\n\tlet dt_price = props.orders[0];\r\n\t//console.log('VERIFICANDO', dt_price)\r\n\tlet orderslength = props.orders.length;\r\n\tlet ultimo = props.orders[orderslength - 1];\r\n\tlet cp = dt_price.call_put === 'CALL' ? 'C' : 'P';\r\n\tlet fecha_desde = dt_price.trade_date + ' ' + dt_price.time;\r\n\tlet fecha_hasta = dt_price.trade_date + ' ' + ultimo.time;\r\n\tconst { loading, error, data } = useQuery(INTRA_DAY_PRICE(dt_price.strike, cp, fecha_desde, fecha_hasta));\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\tif (data) {\r\n\t\t//console.log('Intra day price: ', data)\r\n\t\t// Iteramos para buscar precio\r\n\t\tlet intradays = data.intraday_price_action;\r\n\t\tfor (let i = 0; i < orderslength; i++) {\r\n\t\t\tif (props.orders[i].price === '') {\r\n\t\t\t\tlet _aux_time = props.orders[i].time.substring(5,0) + ':00';\r\n\t\t\t\tlet dt_orders = props.orders[i].trade_date + ' ' + _aux_time;\r\n\t\t\t\tlet intra_length = intradays.length;\r\n\t\t\t\tfor (let j = 0; j < intra_length; j++) {\r\n\t\t\t\t\tlet dt_intra = intradays[j].trade_date + ' ' + intradays[j].time;\r\n\t\t\t\t\tif (dt_orders == dt_intra) {\r\n\t\t\t\t\t\tprops.orders[i].price = intradays[j].close;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Obtenemos lo que hay en sessionStorage\r\n\t\tlet dtimes_process = JSON.parse(sessionStorage.getItem('dtimes_process'));\r\n\t\tlet dt_orders_process = JSON.parse(sessionStorage.getItem('dt_orders_process'));\r\n\t\tconsole.log('DTO',dt_orders_process)\r\n\t\tlet dt_groups_process = sessionStorage.getItem('dt_groups_process');\r\n\t\tlet current_pnl = 0;\r\n\t\tlet position = 0;\r\n\t\tlet accum_value = 0;\r\n\t\tlet accum_ant = 0;\r\n\t\tfor(let order in props.orders) {\r\n\t\t\tif (!state.xorders.includes(props.orders[order])) {\r\n\t\t\t\t// Logic quantity\r\n\t\t\t\tif (props.orders[order].action == 'Sell') {\r\n\t\t\t\t\tprops.orders[order].quantity = props.orders[order].quantity * -1; \r\n\t\t\t\t}\r\n\t\t\t\t// Calculamos valor\r\n\t\t\t\tlet value = props.orders[order].price * props.orders[order].quantity;\r\n\t\t\t\tprops.orders[order].value = value;\r\n\t\t\t\t// Accum Value\r\n\t\t\t\taccum_value = accum_value + props.orders[order].value;\r\n\t\t\t\tprops.orders[order].accum_value = accum_value.toFixed(2);\r\n\t\t\t\t// Position calculate\r\n\t\t\t\tposition = position + props.orders[order].quantity;\r\n\t\t\t\tprops.orders[order].position = position;\r\n\t\t\t\t// current_pnl\r\n\t\t\t\t//current_pnl = current_pnl + value;\r\n\t\t\t\tlet c_pnl = (props.orders[order].price * props.orders[order].position) - props.orders[order].accum_value;\r\n\t\t\t\tprops.orders[order].current_pnl = c_pnl.toFixed(2);\r\n\t\t\t\t//console.log('Order', props.orders[order])\r\n\t\t\t\tstate.xorders.push(props.orders[order])\r\n\t\t\t\t// Preparando para insertar data en sessionStorage\r\n\t\t\t\tlet date_process = props.orders[order].trade_date + ' ' + props.orders[order].time.substring(5,0);\r\n\t\t\t\tif (!dtimes_process.includes(date_process)) {\r\n\t\t\t\t\tdtimes_process.push(date_process);\r\n\t\t\t\t}\r\n\t\t\t\tif (!dt_orders_process.some(e => e.id == props.orders[order].id)) {\r\n\t\t\t\t\tdt_orders_process.push(props.orders[order]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsessionStorage.setItem('dtimes_process', JSON.stringify(dtimes_process));\r\n\t\tsessionStorage.setItem('dt_orders_process', JSON.stringify(dt_orders_process));\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n              \t<BootstrapTable keyField={props.name} data={ state.xorders } columns={ state.xcolumns } />\r\n              \t<TResumen current={props.name} ></TResumen>\r\n            </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction TResumen(props) {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\tycolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'running_pnl',\r\n\t\t\t\t  text: 'Running PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\txrows: [],\r\n\t\tlabels: [],\r\n\t\tdatasets: [\r\n\t\t    {\r\n\t\t      label: 'Running PnL',\r\n\t\t      fill: true,\r\n\t\t      lineTension: 0,\r\n\t\t      backgroundColor: 'rgba(0,128,0,0.5)',\r\n\t\t      borderColor: 'rgba(0,0,0,1)',\r\n\t\t      borderWidth: 1,\r\n\t\t      data: []\r\n\t\t    }\r\n\t\t  ]\r\n\t});\r\n\r\n\tlet showTable = false;\r\n\tlet groups_ready = JSON.parse(sessionStorage.getItem('groups_ready'));\r\n\tlet ngroups = sessionStorage.getItem('dt_groups_process');\r\n\tlet pos = groups_ready.indexOf(props.current);\r\n\tconsole.log(props.current, pos);\r\n\tif (pos == (groups_ready.length - 1)) {\r\n\t\t//console.log('A mostrar table');\r\n\t\tshowTable = true;\r\n\t}\r\n\tif (showTable) {\r\n\t\t// A preparar data para info\r\n\t\t// todas las fechas y minutos\r\n\t\tlet all_dt = JSON.parse(sessionStorage.getItem('dtimes_process'));\r\n\t\t// Todas las ordenes procesadas\r\n\t\tlet all_orders = JSON.parse(sessionStorage.getItem('dt_orders_process'));\r\n\t\t// Para el grafico\r\n\t\tstate.labels = all_dt;\r\n\r\n\t\tlet n_dt = all_dt.length;\r\n\t\tfor (let i = 0; i < n_dt; i++) {\r\n\t\t\tlet n_ao = all_orders.length;\r\n\t\t\tlet running_pnl = 0;\r\n\t\t\tfor(let j = 0; j < n_ao; j++) {\r\n\t\t\t\tlet fecha_compare = all_orders[j].trade_date + ' ' + all_orders[j].time.substring(5,0);\r\n\t\t\t\tif (fecha_compare == all_dt[i]) {\r\n\t\t\t\t\trunning_pnl = running_pnl + parseFloat(all_orders[j].current_pnl);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet splited = all_dt[i].split(' ');\r\n\t\t\tlet obj = {\r\n\t\t\t\t'date': splited[0],\r\n\t\t\t\t'time': splited[1],\r\n\t\t\t\t'running_pnl': running_pnl.toFixed(2) * 100\r\n\t\t\t}\r\n\t\t\tstate.xrows.push(obj);\r\n\t\t\tstate.datasets[0].data.push(obj.running_pnl);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t\t<h2>Resume</h2>\r\n\t\t\t\t\t<BootstrapTable keyField={props.name + 'r'} data={ state.xrows } columns={ state.ycolumns } />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t<div>\r\n\t\t        <Line\r\n\t\t          data={state}\r\n\t\t          options={{\r\n\t\t            title:{\r\n\t\t              display:true,\r\n\t\t              text:'Average Running PnL',\r\n\t\t              fontSize:20\r\n\t\t            },\r\n\t\t            legend:{\r\n\t\t              display:true,\r\n\t\t              position:'bottom'\r\n\t\t            }\r\n\t\t          }}\r\n\t\t        />\r\n\t\t      </div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\r\n      \tid\r\n      \tstrike\r\n     \ttime\r\n      \ttrade_date\r\n      \tcall_put\r\n      \taction\r\n      \texp_date\r\n     \tprice\r\n      \tis_open,\r\n    \tquantity\r\n    }\r\n  }\r\n`;\r\n\r\nconst INTRA_DAY_PRICE = (strike, call_put, dt_init, dt_end) => { \r\n\treturn gql`\r\n\t  {\r\n\t    intraday_price_action(where: {strike: {_eq: \"${strike}\"}, call_put: {_eq: \"${call_put}\"}, date_time: {_gte: \"${dt_init}\"}, _and: {date_time: {_lte: \"${dt_end}\"}}}, order_by: {trade_date: asc, time: asc}) {\r\n\t      trade_date\r\n\t      time\r\n\t      call_put\r\n\t      exp_date\r\n\t      close\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nexport default ATables;","import React from 'react';\nimport { ApolloProvider} from '@apollo/react-hooks';\nimport ApolloClient, {gql} from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  //BrowserRouter\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\n// Views\nimport Tables from './views/tables/tables'\nimport LinkList from './views/tables/LinkList'\nimport ATables from './views/tables/atables'\n\nconst client = new ApolloClient({\n  uri: 'https://auto-alpha-db.herokuapp.com/v1/graphql',\n});\n\nconst ORDERS_QUERY = gql`\n  {\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\n      id\n      strike\n      time\n      trade_date\n      call_put\n      action\n      exp_date\n      price\n      is_open\n    }\n  }\n`;\n\nconst INTRA_DAY_PRICE = (strike, call_put, dt_init, dt_end) => { return gql`\n  {\n    intraday_price_action(where: {strike: {_eq: \"${strike}\"}, call_put: {_eq: \"${call_put}\"}, date_time: {_gte: \"${dt_init}\"}, _and: {date_time: {_lte: \"${dt_end}\"}}}, order_by: {trade_date: asc, time: asc}) {\n      trade_date\n      time\n      call_put\n      exp_date\n      close\n    }\n  }\n`};\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Tables}></Route>\n            <Route path=\"/tables\" component={ATables}></Route>\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/about2\" component={About2}></Route>\n            <Route path=\"/welcome\" component={Welcome}></Route>\n            <Route path=\"/links\" component={LinkList}></Route>\n          </Switch>\n        </Router>\n      </div>\n    </ApolloProvider>\n  )\n}\n\nfunction About() {\n  const { loading, error, data } = useQuery(ORDERS_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n  var fecha1 = moment('20/06/2020 12:00:00', 'DD/MM/YYYY HH:mm:ss');\n  var fecha2 = moment('25/06/2020 12:00:00', 'DD/MM/YYYY HH:mm:ss');\n  console.log(fecha2.diff(fecha1, 'minutes'));\n  return <h2>About</h2>;\n}\n\nfunction Welcome() {\n  client\n    .query({\n      query: gql`\n        {\n          orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\n            id\n            strike\n            time\n            trade_date\n            call_put\n            action\n            exp_date\n            price\n            is_open\n          }\n        }\n      `\n    })\n    .then(result => console.log(result))\n    .catch(err => console.error(err));\n  return <h2>Welcome</h2>;\n}\n\nfunction About2() {\n  const { loading, error, data } = useQuery(INTRA_DAY_PRICE('700', 'C', '2020-01-30T15:43:08Z', '2020-01-30T15:49:08Z'));\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n    console.log('Data 2', data);\n  return <h2>About2</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}