{"version":3,"sources":["views/tables/tables.js","views/traders/traders.js","views/tables/Link.js","views/tables/LinkList.js","views/tables/atables.js","views/orders/orders.js","views/orders/trade_orders.js","App.js","serviceWorker.js","index.js"],"names":["Tables","props","state","componentMounted","columns","dataField","text","products","this","console","log","query","FEED_QUERY","loading","error","data","orders","className","keyField","React","Component","gql","TRADES_QUERY","Trades","useState","trows","history","useHistory","rowEvents","onClick","e","row","rowIndex","obj","return_dollar","id_reference","return_percentage","sessionStorage","setItem","JSON","stringify","push","id","useEffect","trades","ntrades","length","i","symbol","pagination","paginationFactory","Link","key","strike","exp_date","LinkList","linksToRender","map","link","call_put","Tprice","xcolumns","xorders","groups_ready","getItem","parse","includes","name","dt_price","orderslength","ultimo","cp","fecha_desde","trade_date","time","fecha_hasta","useQuery","INTRA_DAY_PRICE","intradays","intraday_price_action","price","_aux_time","substring","dt_orders","intra_length","j","close","dtimes_process","dt_orders_process","position","accum_value","order","action","quantity","value","toFixed","c_pnl","current_pnl","date_process","some","indx","TResumen","current","ycolumns","xrows","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","showTable","pos","indexOf","all_dt","all_orders","n_dt","n_ao","running_pnl","parseFloat","splited","split","options","title","display","fontSize","legend","ORDERS_QUERY","trade_id","dt_init","dt_end","ATables","groups","dataGroups","filldata","iPrices","useParams","client","useApolloClient","trad_info","then","result","catch","err","nlength","_aux","hasOwnProperty","ngroups","dataGroup","fecha1","moment","diferencia","diff","new_time","add","format","fillable","is_open","concat","sort","a","b","Date","group","index","setState","norders","latest","date_from","date_to","orders_state","processPrices","setLoading","datediff","start","finish","dt1","getTime","xgroups","xdtgroups","xfilldata","dtg","dt2","nitems","items","_datasets","Torders","data_resumen","axios","post","reponse","data_groups","pnl_resumen","ApolloClient","uri","About","fecha2","Welcome","About2","App","exact","path","component","Orders","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4745dde8.chunk.js","sourcesContent":["import React from 'react';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport {gql} from 'apollo-boost';\r\nimport { Query } from 'react-apollo'\r\n//import { useQuery, useLazyQuery, useApolloClient } from '@apollo/react-hooks';\r\n\r\nclass Tables extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcomponentMounted: false,\r\n\t      \tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\tproducts: [\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t    this.state.componentMounted = true;\r\n\t    console.log(this.state.componentMounted);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t    console.log('Chao')\r\n  \t}\r\n  \tUNSAFE_componentWillUpdate() {\r\n  \t\tconsole.log('LLegue aqui')\r\n  \t}\r\n\r\n\trender() {\r\n\t    return (\r\n\t      \t<Query query={FEED_QUERY}>\r\n\t        {({ loading, error, data }) => {\r\n\t          \tif (loading) return <div>Buscando data</div>\r\n\t          \tif (error) return <div>Ha ocurrido un error: {error}</div>\r\n\t          \tif (data) {\r\n\t\t          \t/*ordersToRender.map( order => this.state.products.push(order));\r\n\t\t          \tconsole.log('Products', this.state.products)*/\r\n\t\t          \tthis.state.products = data.orders;\r\n\t\t          \treturn (\r\n\t\t            <div className=\"container\">\r\n\t\t              <BootstrapTable keyField='id' data={ this.state.products } columns={ this.state.columns } />\r\n\t\t            </div>\r\n\t\t          )\r\n\t          \t}\r\n\t        }}\r\n\t      </Query>\r\n\t    )\r\n\t}\r\n}\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\r\n      id\r\n      strike\r\n      time\r\n      trade_date\r\n      call_put\r\n      action\r\n      exp_date\r\n      price\r\n      is_open\r\n    }\r\n  }\r\n`;\r\nexport default Tables;","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Query } from 'react-apollo'\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport './trades.css';\r\n\r\nfunction Trades() {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\ttrows:[],\r\n\t\tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'id_reference',\r\n\t\t\t\t  text: 'Reference ID'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'symbol_display',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'return_dollar',\r\n\t\t\t\t  text: 'Return Dollar'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'return_percentage',\r\n\t\t\t\t  text: 'Return Percentage'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'open_date',\r\n\t\t\t\t  text: 'Open Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'close_date',\r\n\t\t\t\t  text: 'Close Date'\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t});\r\n\r\n\tconst history = useHistory();\r\n\r\n\tconst rowEvents = {\r\n\t\tonClick: (e, row, rowIndex) => {\r\n\t\t\t//console.log(`enter on row with index:`, row);\r\n\t\t\tlet obj = {\r\n\t\t\t\treturn_dollar: row.return_dollar,\r\n\t\t\t\tid_reference: row.id_reference,\r\n\t\t\t\treturn_percentage: row.return_percentage\r\n\t\t\t}\r\n\t\t\tsessionStorage.setItem('trad_info',JSON.stringify(obj));\r\n\t\t\thistory.push(\"/torders/\" + row.id);\r\n\t  \t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t});\r\n\r\n\treturn (\r\n        <Query query={TRADES_QUERY()}>\r\n\t        {({ loading, error, data }) => {\r\n\t          \tif (loading) return <div>Loading data...</div>\r\n\t          \tif (error) return <div>An error has ocurred: {error}</div>\r\n\t          \tif (data) {\r\n\t          \t\tconsole.log(data);\r\n\t          \t\tlet trades = data.trades;\r\n\t          \t\tlet ntrades = trades.length;\r\n\t          \t\tconsole.log('Ntrades', ntrades);\r\n\t          \t\tfor (var i = 0; i < ntrades; i++) {\r\n\t          \t\t\ttrades[i]['symbol_display'] = trades[i].symbol.symbol\r\n\t          \t\t\tstate.trows.push(trades[i])\r\n\t          \t\t}\r\n\t          \t\treturn (\r\n\t          \t\t\t<div className=\"container\">\r\n\t          \t\t\t\t<h4>Trades List</h4>\r\n\t          \t\t\t\t<BootstrapTable keyField={'trade_tbl'} data={ state.trows } columns={ state.columns } rowEvents={ rowEvents } pagination={ paginationFactory() }/>\r\n\t          \t\t\t</div>\r\n\t          \t\t)\r\n\t          \t}\r\n\t        }}\r\n\t    </Query>\r\n    )\r\n}\r\n\r\nconst TRADES_QUERY = () => {\r\n\treturn gql`\r\n\t  {\r\n\t    trades {\r\n\t    \tid\r\n\t      \tid_reference\r\n\t      \tsymbol {\r\n\t\t      symbol\r\n\t\t    }\r\n\t      \treturn_dollar\r\n\t      \treturn_percentage\r\n\t      \topen_date\r\n    \t\tclose_date\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nexport default Trades;","import React, { Component } from 'react'\r\n\r\nclass Link extends Component {\r\n  render() {\r\n    return (\r\n        <tr key={this.props.id}>\r\n          <td> {this.props.data.strike} </td>\r\n          <td> {this.props.data.exp_date}</td>\r\n        </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Link","import React, { Component } from 'react'\r\nimport { Query } from 'react-apollo'\r\nimport gql from 'graphql-tag'\r\nimport Link from './Link'\r\n\r\nclass LinkList extends Component {\r\n  render() {\r\n    return (\r\n      <Query query={FEED_QUERY}>\r\n        {({ loading, error, data }) => {\r\n          if (loading) return <div>Fetching</div>\r\n          if (error) return <div>Error</div>\r\n    \t\tconsole.log(data)\r\n          const linksToRender = data.orders\r\n          return (\r\n            <div>\r\n              {linksToRender.map((link) => {\r\n              \tconsole.log(link)\r\n              \treturn <Link key={link.id} id={link.id} link={link.call_put} data={link}/>\r\n              })}\r\n            </div>\r\n          )\r\n        }}\r\n      </Query>\r\n    )\r\n  }\r\n}\r\n\r\nconst FEED_QUERY = gql`\r\n  {\r\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\r\n      id\r\n      strike\r\n      time\r\n      trade_date\r\n      call_put\r\n      action\r\n      exp_date\r\n      price\r\n      is_open\r\n    }\r\n  }\r\n`;\r\n\r\nexport default LinkList","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Query } from 'react-apollo'\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nimport './tables.css';\r\n\r\nfunction ATables() {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\torders:[],\r\n\t\tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\tgroups:[],\r\n\t\tdataGroups: {},\r\n\t\tfilldata: {},\r\n\t\tiPrices:[]\r\n\t});\r\n\r\n\tlet { trade_id } = useParams();\r\n\tconsole.log('Componente renderizado');\r\n\tconsole.log('PARAM', trade_id)\r\n\tconst client = useApolloClient();\r\n\tlet groups_ready = [], dtimes_process = [], dt_orders_process = [];\r\n\tsessionStorage.setItem('groups_ready', JSON.stringify(groups_ready));\r\n\tsessionStorage.setItem('dtimes_process', JSON.stringify(dtimes_process));\r\n\tsessionStorage.setItem('dt_orders_process', JSON.stringify(dt_orders_process));\r\n\r\n\tlet trad_info = JSON.parse(sessionStorage.getItem('trad_info'));\r\n\tconsole.log('trad_info', trad_info)\r\n\r\n\tuseEffect(() => {\r\n\t\tclient\r\n\t\t    .query({\r\n\t\t      query: INTRA_DAY_PRICE('700', 'C', '2020-01-30T15:43:08Z', '2020-01-30T15:49:08Z')\r\n\t\t    })\r\n\t\t    .then(result => {\r\n\t\t    \tstate.iPrices = result.data.intraday_price_action;\r\n\t\t    \t//console.log('Prices Client', state.iPrices)\r\n\t\t    })\r\n\t\t    .catch(err => console.error(err))\r\n\t});\r\n\r\n\treturn (\r\n        <Query query={ORDERS_QUERY(trade_id)}>\r\n\t        {({ loading, error, data }) => {\r\n\t          \tif (loading) return <div>Buscando data</div>\r\n\t          \tif (error) return <div>Ha ocurrido un error: {error}</div>\r\n\t          \tif (data) {\r\n\t          \t\tconsole.log('Data: ', data);\r\n\t          \t\tlet dtimes_process = sessionStorage.getItem('dtimes_process') && JSON.parse(sessionStorage.getItem('dtimes_process')).length ? JSON.parse(sessionStorage.getItem('dtimes_process')) : [];\r\n\t          \t\tlet dt_orders_process = sessionStorage.getItem('dt_orders_process') && JSON.parse(sessionStorage.getItem('dt_orders_process')).length ? JSON.parse(sessionStorage.getItem('dt_orders_process')) : [];;\r\n\t          \t\tsessionStorage.setItem('dtimes_process', JSON.stringify(dtimes_process));\r\n\t          \t\tsessionStorage.setItem('dt_orders_process', JSON.stringify(dt_orders_process));\r\n\t          \t\t/*const ordersToRender = data.orders\r\n\t\t          \tordersToRender.map( order => state.orders.push(order));*/\r\n\t\t          \tstate.orders = data.orders;\r\n\r\n\t\t          \tlet nlength = data.orders.length;\r\n\t\t          \tfor (let i = 0; i < nlength; i++) {\r\n\t\t          \t\t//console.log('Orders n#: ',i+1);\r\n\t\t          \t\tlet _aux = state.orders[i].strike + state.orders[i].exp_date + state.orders[i].call_put;\r\n\t\t          \t\tif (!state.groups.includes(_aux)) {\r\n\t\t          \t\t\tstate.groups.push(_aux)\r\n\t\t          \t\t} \r\n\t\t          \t\t/*else {\r\n\t\t          \t\t\tif (!state.dataGroups.hasOwnProperty(_aux)) {\r\n\t\t          \t\t\t\tstate.dataGroups[_aux] = [];\r\n\t\t          \t\t\t} else{\r\n\t\t          \t\t\t\tstate.dataGroups[_aux].push(state.orders[i])\r\n\t\t          \t\t\t}\r\n\t\t          \t\t}*/\r\n\t\t          \t\tif (!state.dataGroups.hasOwnProperty(_aux)) {\r\n\t\t          \t\t\t\tstate.dataGroups[_aux] = [];\r\n\t\t          \t\t}\r\n\t\t\t\t\t\tstate.dataGroups[_aux].push(state.orders[i])\r\n\t\t          \t}\r\n\t\t          \t// Rellenando los minutos\r\n\t\t          \t// recorro los grupos disponibles\r\n\t\t          \tlet ngroups = state.groups.length;\r\n\t\t          \tsessionStorage.setItem('dt_groups_process', ngroups);\r\n\t\t          \t//console.log('Cantidad de groups:', ngroups)\r\n\t\t          \tfor (let i = 0; i < ngroups; i++) {\r\n\t\t          \t\tlet dataGroup = state.dataGroups[state.groups[i]];\r\n\t\t          \t\tstate.filldata[state.groups[i]] = [];\r\n\t\t          \t\tif (dataGroup.length) {\r\n\t\t          \t\t\tlet fecha1 = moment(dataGroup[0]['trade_date'] + ' ' + dataGroup[0]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t\tlet fecha2 = moment(dataGroup[ngroups-1]['trade_date'] + ' ' + dataGroup[ngroups-1]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t\tlet diferencia = fecha2.diff(fecha1, 'minutes');\r\n\t\t\t\t\t\t\t//console.log('diferencia', diferencia);\r\n\t\t\t\t\t\t\tfor (let j = 1; j < diferencia; j++) {\r\n\t\t\t\t\t\t\t\tlet new_time = moment(dataGroup[0].time, 'h:m:s').add(j, 'minutes').format('HH:mm:ss');\r\n\t\t\t\t\t\t\t\tlet fillable = {\r\n\t\t\t\t\t\t\t\t\tid: dataGroup[0].id + '.' + j,\r\n\t\t\t\t\t\t\t\t\tstrike: dataGroup[0].strike,\r\n\t\t\t\t\t\t\t\t\taction: dataGroup[0].action,\r\n\t\t\t\t\t\t\t\t\tcall_put: dataGroup[0].call_put,\r\n\t\t\t\t\t\t\t\t\texp_date: dataGroup[0].exp_date,\r\n\t\t\t\t\t\t\t\t\tprice: '',\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tis_open: dataGroup[0].is_open,\r\n\t\t\t\t\t\t\t\t\ttrade_date: dataGroup[0].trade_date,\r\n\t\t\t\t\t\t\t\t\ttime: new_time,\r\n\t\t\t\t\t\t\t\t\tquantity: 0\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstate.filldata[state.groups[i]].push(fillable);\r\n\t\t\t\t\t\t\t}\r\n\t\t          \t\t}\r\n\t\t          \t}\r\n\t\t          \t// A concatenar groups y fillables\r\n\t\t          \tfor (let i = 0; i < ngroups; i++) {\r\n\t\t          \t\tlet concat = state.dataGroups[state.groups[i]].concat(state.filldata[state.groups[i]]);\r\n\t\t          \t\tconcat.sort(function(a,b){\r\n\t\t\t\t\t\t  return new Date(a.trade_date + ' ' + a.time) - new Date(b.trade_date + ' ' + b.time);\r\n\t\t\t\t\t\t});\r\n\t\t          \t\tstate.dataGroups[state.groups[i]] = concat;\r\n\t\t          \t}\r\n\t\t          \t//console.log('Groups: ',state.groups);\r\n\t\t          \t//console.log('dataGroups',state.dataGroups);\r\n\t\t          \t//console.log('FillData', state.filldata);\r\n\t\t          \tif (state.iPrices.length) {\r\n\t\t          \t\treturn (\r\n\t\t\t\t            <div className=\"container\">\r\n\t\t\t\t              {state.groups.map( (group) => <BootstrapTable keyField={group} data={ state.dataGroups[group] } columns={ state.columns } />)}\r\n\t\t\t\t            </div>\r\n\t\t\t\t        )\r\n\t\t          \t} else {\r\n\t\t          \t\treturn (\r\n\t\t          \t\t\t<div className=\"container\">\r\n\t\t          \t\t\t\t<ul>\r\n\t\t          \t\t\t\t\t<li keyField=\"trade_id\">ID: {trade_id}</li>\r\n\t\t          \t\t\t\t\t{trad_info ? <><li keyField=\"return_dollar\">Return Dollar: {trad_info.return_dollar}</li>\r\n\t\t          \t\t\t\t\t<li keyField=\"return_percentage\">Return Percentage: {trad_info.return_percentage}</li>\r\n\t\t          \t\t\t\t\t<li keyField=\"id_reference\">Reference ID: {trad_info.id_reference}</li></> : ''}\r\n\t\t          \t\t\t\t</ul>\r\n\t\t          \t\t\t\t{state.groups.map( (group, index) => <Tprice name={group} indx={index} orders={ state.dataGroups[group] } />)}\r\n\t\t          \t\t\t</div>\r\n\t\t          \t\t)\r\n\t\t          \t}\r\n\t          \t}\r\n\t        }}\r\n\t    </Query>\r\n    )\r\n}\r\n\r\nfunction Tprice(props) {\r\n\t//console.log('Props',props.orders);\r\n\tconst [state, setState] = useState({\r\n\t\txcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'position',\r\n\t\t\t\t  text: 'Position'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'accum_value',\r\n\t\t\t\t  text: 'Accum Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\txorders: []\r\n\t});\r\n\t\r\n\tlet groups_ready = sessionStorage.getItem('groups_ready') ? JSON.parse(sessionStorage.getItem('groups_ready')) : [];\r\n\tif (!groups_ready.includes(props.name)) {\r\n\t\tgroups_ready.push(props.name);\r\n\t}\r\n\tsessionStorage.setItem('groups_ready', JSON.stringify(groups_ready));\r\n\tlet dt_price = props.orders[0];\r\n\t//console.log('VERIFICANDO', dt_price)\r\n\tlet orderslength = props.orders.length;\r\n\tlet ultimo = props.orders[orderslength - 1];\r\n\tlet cp = dt_price.call_put === 'CALL' ? 'C' : 'P';\r\n\tlet fecha_desde = dt_price.trade_date + ' ' + dt_price.time;\r\n\tlet fecha_hasta = dt_price.trade_date + ' ' + ultimo.time;\r\n\tconst { loading, error, data } = useQuery(INTRA_DAY_PRICE(dt_price.strike, cp, fecha_desde, fecha_hasta));\r\n\tif (loading) return <p>Loading...</p>;\r\n\tif (error) return <p>Error :(</p>;\r\n\tif (data) {\r\n\t\t//console.log('Intra day price: ', data)\r\n\t\t// Iteramos para buscar precio\r\n\t\tlet intradays = data.intraday_price_action;\r\n\t\tfor (let i = 0; i < orderslength; i++) {\r\n\t\t\tif (props.orders[i].price === '') {\r\n\t\t\t\tlet _aux_time = props.orders[i].time.substring(5,0) + ':00';\r\n\t\t\t\tlet dt_orders = props.orders[i].trade_date + ' ' + _aux_time;\r\n\t\t\t\tlet intra_length = intradays.length;\r\n\t\t\t\tfor (let j = 0; j < intra_length; j++) {\r\n\t\t\t\t\tlet dt_intra = intradays[j].trade_date + ' ' + intradays[j].time;\r\n\t\t\t\t\tif (dt_orders == dt_intra) {\r\n\t\t\t\t\t\tprops.orders[i].price = intradays[j].close;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Obtenemos lo que hay en sessionStorage\r\n\t\tlet dtimes_process = JSON.parse(sessionStorage.getItem('dtimes_process'));\r\n\t\tlet dt_orders_process = JSON.parse(sessionStorage.getItem('dt_orders_process'));\r\n\t\tconsole.log('DTO',dt_orders_process)\r\n\t\tlet dt_groups_process = sessionStorage.getItem('dt_groups_process');\r\n\t\tlet current_pnl = 0;\r\n\t\tlet position = 0;\r\n\t\tlet accum_value = 0;\r\n\t\tlet accum_ant = 0;\r\n\t\tfor(let order in props.orders) {\r\n\t\t\tif (!state.xorders.includes(props.orders[order])) {\r\n\t\t\t\t// Logic quantity\r\n\t\t\t\tif (props.orders[order].action == 'Sell') {\r\n\t\t\t\t\tprops.orders[order].quantity = props.orders[order].quantity * -1; \r\n\t\t\t\t}\r\n\t\t\t\t// Calculamos valor\r\n\t\t\t\tlet value = props.orders[order].price * props.orders[order].quantity;\r\n\t\t\t\tprops.orders[order].value = value;\r\n\t\t\t\t// Accum Value\r\n\t\t\t\taccum_value = accum_value + props.orders[order].value;\r\n\t\t\t\tprops.orders[order].accum_value = accum_value.toFixed(2);\r\n\t\t\t\t// Position calculate\r\n\t\t\t\tposition = position + props.orders[order].quantity;\r\n\t\t\t\tprops.orders[order].position = position;\r\n\t\t\t\t// current_pnl\r\n\t\t\t\t//current_pnl = current_pnl + value;\r\n\t\t\t\tlet c_pnl = (props.orders[order].price * props.orders[order].position) - props.orders[order].accum_value;\r\n\t\t\t\tprops.orders[order].current_pnl = c_pnl.toFixed(2);\r\n\t\t\t\t//console.log('Order', props.orders[order])\r\n\t\t\t\tstate.xorders.push(props.orders[order])\r\n\t\t\t\t// Preparando para insertar data en sessionStorage\r\n\t\t\t\tlet date_process = props.orders[order].trade_date + ' ' + props.orders[order].time.substring(5,0);\r\n\t\t\t\tif (!dtimes_process.includes(date_process)) {\r\n\t\t\t\t\tdtimes_process.push(date_process);\r\n\t\t\t\t}\r\n\t\t\t\tif (!dt_orders_process.some(e => e.id == props.orders[order].id)) {\r\n\t\t\t\t\tdt_orders_process.push(props.orders[order]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsessionStorage.setItem('dtimes_process', JSON.stringify(dtimes_process));\r\n\t\tsessionStorage.setItem('dt_orders_process', JSON.stringify(dt_orders_process));\r\n\t\t//console.log('INDICE', props.indx)\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<h4>Leg {props.indx + 1}</h4>\r\n              \t<BootstrapTable keyField={props.name} data={ state.xorders } columns={ state.xcolumns } />\r\n              \t<TResumen current={props.name} ></TResumen>\r\n            </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction TResumen(props) {\r\n\r\n\tconst [state, setState] = useState({\r\n\t\tycolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'running_pnl',\r\n\t\t\t\t  text: 'Running PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\txrows: [],\r\n\t\tlabels: [],\r\n\t\tdatasets: [\r\n\t\t    {\r\n\t\t      label: 'Running PnL',\r\n\t\t      fill: true,\r\n\t\t      lineTension: 0,\r\n\t\t      backgroundColor: 'rgba(0,128,0,0.5)',\r\n\t\t      borderColor: 'rgba(0,0,0,1)',\r\n\t\t      borderWidth: 1,\r\n\t\t      data: []\r\n\t\t    }\r\n\t\t  ]\r\n\t});\r\n\r\n\tlet showTable = false;\r\n\tlet groups_ready = JSON.parse(sessionStorage.getItem('groups_ready'));\r\n\tlet ngroups = sessionStorage.getItem('dt_groups_process');\r\n\tlet pos = groups_ready.indexOf(props.current);\r\n\tconsole.log(props.current, pos);\r\n\tif (pos == (groups_ready.length - 1)) {\r\n\t\t//console.log('A mostrar table');\r\n\t\tshowTable = true;\r\n\t}\r\n\tif (showTable) {\r\n\t\t// A preparar data para info\r\n\t\t// todas las fechas y minutos\r\n\t\tlet all_dt = JSON.parse(sessionStorage.getItem('dtimes_process'));\r\n\t\t// Todas las ordenes procesadas\r\n\t\tlet all_orders = JSON.parse(sessionStorage.getItem('dt_orders_process'));\r\n\t\t// Para el grafico\r\n\t\tstate.labels = all_dt;\r\n\r\n\t\tlet n_dt = all_dt.length;\r\n\t\tfor (let i = 0; i < n_dt; i++) {\r\n\t\t\tlet n_ao = all_orders.length;\r\n\t\t\tlet running_pnl = 0;\r\n\t\t\tfor(let j = 0; j < n_ao; j++) {\r\n\t\t\t\tlet fecha_compare = all_orders[j].trade_date + ' ' + all_orders[j].time.substring(5,0);\r\n\t\t\t\tif (fecha_compare == all_dt[i]) {\r\n\t\t\t\t\trunning_pnl = running_pnl + parseFloat(all_orders[j].current_pnl);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet splited = all_dt[i].split(' ');\r\n\t\t\tlet obj = {\r\n\t\t\t\t'date': splited[0],\r\n\t\t\t\t'time': splited[1],\r\n\t\t\t\t'running_pnl': running_pnl.toFixed(2) * 100\r\n\t\t\t}\r\n\t\t\tstate.xrows.push(obj);\r\n\t\t\tstate.datasets[0].data.push(obj.running_pnl);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<h4>Running PnL Table Form</h4>\r\n\t\t\t\t\t<BootstrapTable keyField={props.name + 'r'} data={ state.xrows } columns={ state.ycolumns } />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t        <Line\r\n\t\t\t\t          data={state}\r\n\t\t\t\t          options={{\r\n\t\t\t\t            title:{\r\n\t\t\t\t              display:true,\r\n\t\t\t\t              text:'Running PnL Chart',\r\n\t\t\t\t              fontSize:20\r\n\t\t\t\t            },\r\n\t\t\t\t            legend:{\r\n\t\t\t\t              display:true,\r\n\t\t\t\t              position:'bottom'\r\n\t\t\t\t            }\r\n\t\t\t\t          }}\r\n\t\t\t\t        />\r\n\t\t\t      \t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<hr/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst ORDERS_QUERY = (trade_id) => {\r\n\treturn gql`\r\n\t  {\r\n\t    orders(where: {trade_id: {_eq: ${trade_id}}}, order_by: {trade_date: asc, time: asc}) {\r\n\t      \tid\r\n\t      \tstrike\r\n\t     \ttime\r\n\t      \ttrade_date\r\n\t      \tcall_put\r\n\t      \taction\r\n\t      \texp_date\r\n\t     \tprice\r\n\t      \tis_open\r\n\t    \tquantity\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nconst INTRA_DAY_PRICE = (strike, call_put, dt_init, dt_end) => { \r\n\treturn gql`\r\n\t  {\r\n\t    intraday_price_action(where: {strike: {_eq: \"${strike}\"}, call_put: {_eq: \"${call_put}\"}, date_time: {_gte: \"${dt_init}\"}, _and: {date_time: {_lte: \"${dt_end}\"}}}, order_by: {trade_date: asc, time: asc}) {\r\n\t      trade_date\r\n\t      time\r\n\t      call_put\r\n\t      exp_date\r\n\t      close\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nexport default ATables;","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { Query } from 'react-apollo'\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nfunction ATables() {\r\n\r\n\tconst client = useApolloClient();\r\n\t\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [state, setState] = useState({\r\n\t\tgroups:[],\r\n\t\tdataGroups: {},\r\n\t\tfilldata: {},\r\n\t\torders: []\r\n\t});\r\n\r\n\tconst datediff = (start, finish) => {\r\n\t\tlet dt1 = new Date(start);\r\n\t\tlet dt2 = new Date(finish);\r\n\t\tlet diff = (dt2.getTime() - dt1.getTime()) / 60000;\r\n\t\treturn diff;\r\n\t}\r\n\r\n\tconst loadOrders = () => {\r\n\t\tclient\r\n\t\t    .query({\r\n\t\t      query: ORDERS_QUERY(trade_id)\r\n\t\t    })\r\n\t\t    .then(result => {\r\n\t\t    \tlet xorders = result.data.orders, xgroups = [], xdtgroups = {}, xfilldata = {}, ngroups = 0;\r\n\t\t    \tlet norders = xorders.length;\r\n\t\t    \t/* Getting groups and data for grupos*/\r\n\t\t    \tfor(let i=0; i<norders; i++) {\r\n\t\t    \t\tlet _aux = xorders[i].strike + xorders[i].exp_date + xorders[i].call_put;\r\n\t\t          \t\tif (!xgroups.includes(_aux)) {\r\n\t\t          \t\t\txgroups.push(_aux)\r\n\t\t          \t\t}\r\n\t\t          \t\tif (!xdtgroups.hasOwnProperty(_aux)) {\r\n\t\t          \t\t\t\txdtgroups[_aux] = [];\r\n\t\t          \t\t}\r\n\t\t\t\t\t\txdtgroups[_aux].push(xorders[i])\r\n\t\t    \t}\r\n\t\t    \t/*Rellenando minutos faltantes*/\r\n\t\t    \tngroups = xgroups.length;\r\n\t\t    \tfor(let i=0; i<ngroups; i++) {\r\n\t\t    \t\tlet dtg = xdtgroups[xgroups[i]];\r\n\t\t    \t\txfilldata[xgroups[i]] = [];\r\n\t\t    \t\tlet next = 0, lasted = 0;\r\n\t\t    \t\tif (dtg.length) {\r\n\t\t    \t\t\t//console.log('A DTG', dtg[0])\r\n\t\t    \t\t\t//console.log('A DTG 2', dtg[1])\r\n\t\t    \t\t\t//let fecha1 = moment(dtg[0]['trade_date'] + ' ' + dtg[0]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t//dtg.length-1\r\n\t\t\t\t\t\t//let fecha2 = moment(dtg[1]['trade_date'] + ' ' + dtg[1]['time'], 'DD-MM-YYYY HH:mm:ss');\r\n\t\t\t\t\t\t//let diferencia = fecha2.diff(fecha1, 'minutes');\r\n\t\t\t\t\t\tlet dt1 = dtg[0]['trade_date'] + ' ' + dtg[0]['time'].substring(5,0) + ':00'\r\n\t\t\t\t\t\tlet dt2 = dtg[1]['trade_date'] + ' ' + dtg[1]['time'].substring(5,0) + ':00'\r\n\t\t\t\t\t\tlet diff = datediff(dt1, dt2);\r\n\t\t\t\t\t\t//console.log('Diferencia', diff);\r\n\t\t\t\t\t\tfor (let j = 1; j < diff; j++) {\r\n\t\t\t\t\t\t\tlet new_time = moment(dtg[0].time, 'h:m:s').add(j, 'minutes').format('HH:mm:ss');\r\n\t\t\t\t\t\t\tlet fillable = {\r\n\t\t\t\t\t\t\t\tid: dtg[0].id + '.' + j,\r\n\t\t\t\t\t\t\t\tstrike: dtg[0].strike,\r\n\t\t\t\t\t\t\t\taction: dtg[0].action,\r\n\t\t\t\t\t\t\t\tcall_put: dtg[0].call_put,\r\n\t\t\t\t\t\t\t\texp_date: dtg[0].exp_date,\r\n\t\t\t\t\t\t\t\tprice: '',\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tis_open: dtg[0].is_open,\r\n\t\t\t\t\t\t\t\ttrade_date: dtg[0].trade_date,\r\n\t\t\t\t\t\t\t\ttime: new_time,\r\n\t\t\t\t\t\t\t\tquantity: 0\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\txfilldata[xgroups[i]].push(fillable);\r\n\t\t\t\t\t\t}\r\n\t\t    \t\t}\r\n\t\t    \t}\r\n\t\t    \tfor (let i = 0; i < ngroups; i++) {\r\n\t          \t\tlet concat = xdtgroups[xgroups[i]].concat(xfilldata[xgroups[i]]);\r\n\t          \t\tconcat.sort(function(a,b){\r\n\t\t\t\t\t  return new Date(a.trade_date + ' ' + a.time) - new Date(b.trade_date + ' ' + b.time);\r\n\t\t\t\t\t});\r\n\t          \t\txdtgroups[xgroups[i]] = concat;\r\n\t          \t}\r\n\t\t    \t/*Concatenando dtgroups y gillables*/\r\n\t\t    \tsetState(state => ({...state, orders: xorders, dataGroups: xdtgroups, groups: xgroups}))\r\n\t\t    \t/*console.log('Grupos', xgroups);\r\n\t\t    \tconsole.log('Orders', xorders);\r\n\t\t    \tconsole.log('Fillables', xfilldata)*/\r\n\t\t    \tconsole.log('DtG', xdtgroups);\r\n\t\t    \tsetLoading(false);\r\n\t\t    })\r\n\t\t    .catch(err => console.error(err))\r\n\t}\r\n\r\n\tconst { trade_id } = useParams();\r\n\r\n\tReact.useEffect(() => {\r\n\t\tloadOrders();\r\n\t}, []);\r\n\tlet trad_info = JSON.parse(sessionStorage.getItem('trad_info'));\r\n\r\n\tif(loading) {\r\n\t\treturn (<h3>Loading</h3>)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li keyField=\"trade_id\">ID: {trade_id}</li>\r\n\t\t\t\t\t{trad_info ? <><li keyField=\"return_dollar\">Return Dollar: {trad_info.return_dollar}</li>\r\n\t\t\t\t\t<li keyField=\"return_percentage\">Return Percentage: {trad_info.return_percentage}</li>\r\n\t\t\t\t\t<li keyField=\"id_reference\">Reference ID: {trad_info.id_reference}</li></> : ''}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{state.groups.map( (group, index) => <Tprice name={group} indx={index} orders={ state.dataGroups[group] } />)}\r\n\t\t\t</div>\r\n\t    )\r\n\t}\r\n}\r\n\r\nfunction Tprice(props) {\r\n\tconst [state, setState] = useState({\r\n\t\txcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'position',\r\n\t\t\t\t  text: 'Position'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'accum_value',\r\n\t\t\t\t  text: 'Accum Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\torders: []\r\n\t});\r\n\r\n\tconst client = useApolloClient();\r\n\r\n\tconst processPrices = () => {\r\n\t\tlet xorders = props.orders;\r\n\t\tlet norders = xorders.length;\r\n\t\tlet latest = xorders[norders - 1];\r\n\t\tlet dt_price = xorders[0];\r\n\t\tlet date_from = dt_price.trade_date + ' ' + dt_price.time,\r\n\t\t\tdate_to = dt_price.trade_date + ' ' + latest.time;\r\n\t\tlet cp = dt_price.call_put === 'CALL' ? 'C' : 'P';\r\n\t\tclient\r\n\t\t    .query({\r\n\t\t      query: INTRA_DAY_PRICE(dt_price.strike, cp, date_from, date_to)\r\n\t\t    })\r\n\t\t    .then(result => {\r\n\t\t    \tconsole.log('Result Price', result);\r\n\t\t    \tlet intradays = result.data.intraday_price_action;\r\n\t\t    \t// We iterate for search price\r\n\t\t    \tfor (let i = 0; i < norders; i++) {\r\n\t\t\t\t\tif (xorders[i].price === '') {\r\n\t\t\t\t\t\tlet _aux_time = xorders[i].time.substring(5,0) + ':00';\r\n\t\t\t\t\t\tlet dt_orders = xorders[i].trade_date + ' ' + _aux_time;\r\n\t\t\t\t\t\tlet intra_length = intradays.length;\r\n\t\t\t\t\t\tfor (let j = 0; j < intra_length; j++) {\r\n\t\t\t\t\t\t\tlet dt_intra = intradays[j].trade_date + ' ' + intradays[j].time;\r\n\t\t\t\t\t\t\tif (dt_orders == dt_intra) {\r\n\t\t\t\t\t\t\t\txorders[i].price = intradays[j].close;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// We calculate all data\r\n\t\t\t\tlet orders_state = [];\r\n\t\t\t\tlet current_pnl = 0, position = 0, accum_value = 0, accum_ant = 0;\r\n\t\t\t\tfor(let order in xorders) {\r\n\t\t\t\t\tif (!orders_state.includes(xorders[order])) {\r\n\t\t\t\t\t\t// Logic quantity\r\n\t\t\t\t\t\tif (xorders[order].action == 'Sell') {\r\n\t\t\t\t\t\t\txorders[order].quantity = xorders[order].quantity * -1; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Calculate Value\r\n\t\t\t\t\t\tlet value = xorders[order].price * xorders[order].quantity;\r\n\t\t\t\t\t\txorders[order].value = value;\r\n\t\t\t\t\t\t// Accum Value\r\n\t\t\t\t\t\taccum_value = accum_value + xorders[order].value;\r\n\t\t\t\t\t\txorders[order].accum_value = accum_value.toFixed(2);\r\n\t\t\t\t\t\t// Position calculate\r\n\t\t\t\t\t\tposition = position + xorders[order].quantity;\r\n\t\t\t\t\t\txorders[order].position = position;\r\n\t\t\t\t\t\t// current_pnl\r\n\t\t\t\t\t\tlet c_pnl = (xorders[order].price * xorders[order].position) - xorders[order].accum_value;\r\n\t\t\t\t\t\txorders[order].current_pnl = c_pnl.toFixed(2);\r\n\t\t\t\t\t\torders_state.push(xorders[order])\r\n\t\t\t\t\t\t// Preparando para insertar data en sessionStorage\r\n\t\t\t\t\t\t/*let date_process = xorders[order].trade_date + ' ' + xorders[order].time.substring(5,0);\r\n\t\t\t\t\t\tif (!dtimes_process.includes(date_process)) {\r\n\t\t\t\t\t\t\tdtimes_process.push(date_process);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!dt_orders_process.some(e => e.id == xorders[order].id)) {\r\n\t\t\t\t\t\t\tdt_orders_process.push(xorders[order]);\r\n\t\t\t\t\t\t}*/\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// Updating state\r\n\t\t\t\tsetState(state => ({...state, orders: xorders}))\r\n\t\t    })\r\n\t\t    .catch(err => console.error(err))\r\n\t}\r\n\r\n\tReact.useEffect( () => {\r\n\t\tprocessPrices();\r\n\t}, [])\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4>Leg {props.indx + 1}</h4>\r\n            <BootstrapTable keyField={props.name} data={ state.orders } columns={ state.xcolumns } pagination={ paginationFactory() }/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction TResumen(props) {\r\n\tconst [state, setState] = useState({\r\n\t\tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'running_pnl',\r\n\t\t\t\t  text: 'Running PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\trows: [],\r\n\t\tlabels: [],\r\n\t\tdatasets: [\r\n\t\t    {\r\n\t\t      label: 'Running PnL',\r\n\t\t      fill: true,\r\n\t\t      lineTension: 0,\r\n\t\t      backgroundColor: 'rgba(0,128,0,0.5)',\r\n\t\t      borderColor: 'rgba(0,0,0,1)',\r\n\t\t      borderWidth: 1,\r\n\t\t      data: []\r\n\t\t    }\r\n\t\t  ]\r\n\t});\r\n\treturn (<h1>Algodon</h1>)\r\n}\r\n\r\nconst ORDERS_QUERY = (trade_id) => {\r\n\treturn gql`\r\n\t  {\r\n\t    orders(where: {trade_id: {_eq: ${trade_id}}}, order_by: {trade_date: asc, time: asc}) {\r\n\t      \tid\r\n\t      \tstrike\r\n\t     \ttime\r\n\t      \ttrade_date\r\n\t      \tcall_put\r\n\t      \taction\r\n\t      \texp_date\r\n\t     \tprice\r\n\t      \tis_open\r\n\t    \tquantity\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nconst INTRA_DAY_PRICE = (strike, call_put, dt_init, dt_end) => { \r\n\treturn gql`\r\n\t  {\r\n\t    intraday_price_action(where: {strike: {_eq: \"${strike}\"}, call_put: {_eq: \"${call_put}\"}, date_time: {_gte: \"${dt_init}\"}, _and: {date_time: {_lte: \"${dt_end}\"}}}, order_by: {trade_date: asc, time: asc}) {\r\n\t      trade_date\r\n\t      time\r\n\t      call_put\r\n\t      exp_date\r\n\t      close\r\n\t    }\r\n\t  }\r\n\t`\r\n};\r\n\r\nexport default ATables;","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { Query } from 'react-apollo'\r\nimport moment from 'moment';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\nfunction Torders() {\r\n\r\n\tconst client = useApolloClient();\r\n\t\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [state, setState] = useState({\r\n\t\tgroups:[],\r\n\t\tdataGroups: {},\r\n\t\tfilldata: {},\r\n\t\torders: [],\r\n\t\tdata_resumen: [],\r\n\t\tlabels:[]\r\n\t});\r\n\r\n\tconst datediff = (start, finish) => {\r\n\t\tlet dt1 = new Date(start);\r\n\t\tlet dt2 = new Date(finish);\r\n\t\tlet diff = (dt2.getTime() - dt1.getTime()) / 60000;\r\n\t\treturn diff;\r\n\t}\r\n\r\n\tconst { trade_id } = useParams();\r\n\r\n\tReact.useEffect(() => {\r\n\t\tlet url_prod = 'https://price-action-interpreter.herokuapp.com/trade/info/';\r\n\t\tlet url_loc = 'http://localhost:5000/trade/info/';\r\n\t\taxios.post( url_prod + trade_id, {})\r\n\t\t\t.then( reponse => {\r\n\t\t\t\tlet data = reponse.data;\r\n\t\t\t\t//console.log('dataAxios', reponse.data)\r\n\t\t\t\tsetState(state => ({...state, dataGroups: data.data_groups, groups: data.groups, data_resumen: data.pnl_resumen, labels: data.dtimes_process}))\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t})\r\n\t\t\t.catch(err => console.error(err))\r\n\t}, []);\r\n\tlet trad_info = JSON.parse(sessionStorage.getItem('trad_info'));\r\n\r\n\tif(loading) {\r\n\t\treturn (<p>Loading info for trade... please wait.</p>)\r\n\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\t\t\t\t\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li keyField=\"trade_id\">ID: {trade_id}</li>\r\n\t\t\t\t\t{trad_info ? <><li keyField=\"return_dollar\">Return Dollar: {trad_info.return_dollar}</li>\r\n\t\t\t\t\t<li keyField=\"return_percentage\">Return Percentage: {trad_info.return_percentage}</li>\r\n\t\t\t\t\t<li keyField=\"id_reference\">Reference ID: {trad_info.id_reference}</li></> : ''}\r\n\t\t\t\t</ul>\r\n\t\t\t\t{state.groups.map( (group, index) => <Tprice name={group} indx={index} orders={ state.dataGroups[group] } />)}\r\n\t\t\t\t<TResumen name=\"resumen_pnl\" data={state.data_resumen} labels={state.labels}></TResumen>\r\n\t\t\t</div>\r\n\t    )\r\n\t}\r\n}\r\n\r\nfunction Tprice(props) {\r\n\tconst [state, setState] = useState({\r\n\t\txcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'id',\r\n\t\t\t\t  text: 'ID'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'symbol',\r\n\t\t\t\t  text: 'Symbol'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'strike',\r\n\t\t\t\t  text: 'Strike'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'exp_date',\r\n\t\t\t\t  text: 'Exp Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'trade_date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'price',\r\n\t\t\t\t  text: 'Price'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'call_put',\r\n\t\t\t\t  text: 'Call/Put'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'quantity',\r\n\t\t\t\t  text: 'Quantity'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'position',\r\n\t\t\t\t  text: 'Position'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'value',\r\n\t\t\t\t  text: 'Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'accum_value',\r\n\t\t\t\t  text: 'Accum Value'\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'current_pnl',\r\n\t\t\t\t  text: 'Current PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\torders: []\r\n\t});\r\n\r\n\tconst client = useApolloClient();\r\n\r\n\tReact.useEffect( () => {\r\n\t\tsetState(state => ({...state, orders: props.orders}))\r\n\t}, [])\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<h4>Leg {props.indx + 1}</h4>\r\n            <BootstrapTable keyField={props.name} data={ state.orders } columns={ state.xcolumns } pagination={ paginationFactory() }/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nfunction TResumen(props) {\r\n\tconst [state, setState] = useState({\r\n\t\tcolumns: [\r\n\t      \t\t{\r\n\t\t\t\t  dataField: 'date',\r\n\t\t\t\t  text: 'Date'\r\n\t\t\t\t},\r\n\t\t      \t{\r\n\t\t\t\t  dataField: 'time',\r\n\t\t\t\t  text: 'Time'\r\n\t\t\t\t}, \r\n\t\t\t\t{\r\n\t\t\t\t  dataField: 'running_pnl',\r\n\t\t\t\t  text: 'Running PnL'\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\txrows: [],\r\n\t\tlabels: [],\r\n\t\tdatasets: [\r\n\t\t    {\r\n\t\t      label: 'Running PnL',\r\n\t\t      fill: true,\r\n\t\t      lineTension: 0,\r\n\t\t      backgroundColor: 'rgba(0,128,0,0.5)',\r\n\t\t      borderColor: 'rgba(0,0,0,1)',\r\n\t\t      borderWidth: 1,\r\n\t\t      data: []\r\n\t\t    }\r\n\t\t]\r\n\t});\r\n\r\n\tReact.useEffect( () => {\r\n\t\t// Data for render chart\r\n\t\tlet nitems = props.data.length, items = [];\r\n\t\tfor (var i = 0; i < nitems; i++) {\r\n\t\t\titems.push(props.data[i].running_pnl)\r\n\t\t}\r\n\t\tlet _datasets = [\r\n\t\t    {\r\n\t\t      label: 'Running PnL',\r\n\t\t      fill: true,\r\n\t\t      lineTension: 0,\r\n\t\t      backgroundColor: 'rgba(0,128,0,0.5)',\r\n\t\t      borderColor: 'rgba(0,0,0,1)',\r\n\t\t      borderWidth: 1,\r\n\t\t      data: items\r\n\t\t    }\r\n\t\t]\r\n\t\t//console.log('Data', props.data)\r\n\t\tsetState(state => ({...state, xrows: props.data, datasets: _datasets, labels: props.labels}))\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className=\"row\">\r\n\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t<h4>Running PnL Table Form</h4>\r\n\t\t\t\t<BootstrapTable keyField={props.name + 'r'} data={ state.xrows } columns={ state.columns } pagination={ paginationFactory() }/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t        <Line\r\n\t\t\t          data={state}\r\n\t\t\t          options={{\r\n\t\t\t            title:{\r\n\t\t\t              display:true,\r\n\t\t\t              text:'Running PnL Chart',\r\n\t\t\t              fontSize:20\r\n\t\t\t            },\r\n\t\t\t            legend:{\r\n\t\t\t              display:true,\r\n\t\t\t              position:'bottom'\r\n\t\t\t            }\r\n\t\t\t          }}\r\n\t\t\t        />\r\n\t\t      \t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Torders;","import React from 'react';\nimport { ApolloProvider} from '@apollo/react-hooks';\nimport ApolloClient, {gql} from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport moment from 'moment';\nimport {\n  //BrowserRouter\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\n// Views\nimport Tables from './views/tables/tables'\nimport Trades from './views/traders/traders'\nimport LinkList from './views/tables/LinkList'\nimport ATables from './views/tables/atables'\nimport Orders from './views/orders/orders'\nimport Torders from './views/orders/trade_orders'\n\nconst client = new ApolloClient({\n  uri: 'https://auto-alpha-db.herokuapp.com/v1/graphql',\n});\n\nconst ORDERS_QUERY = gql`\n  {\n    orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\n      id\n      strike\n      time\n      trade_date\n      call_put\n      action\n      exp_date\n      price\n      is_open\n    }\n  }\n`;\n\nconst INTRA_DAY_PRICE = (strike, call_put, dt_init, dt_end) => { return gql`\n  {\n    intraday_price_action(where: {strike: {_eq: \"${strike}\"}, call_put: {_eq: \"${call_put}\"}, date_time: {_gte: \"${dt_init}\"}, _and: {date_time: {_lte: \"${dt_end}\"}}}, order_by: {trade_date: asc, time: asc}) {\n      trade_date\n      time\n      call_put\n      exp_date\n      close\n    }\n  }\n`};\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Trades}></Route>\n            <Route path=\"/orders/:trade_id\" component={ATables}></Route>\n            <Route path=\"/ordenes/:trade_id\" component={Orders}></Route>\n            <Route path=\"/torders/:trade_id\" component={Torders}></Route>\n            <Route path=\"/tables\" component={Tables}></Route>\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/about2\" component={About2}></Route>\n            <Route path=\"/welcome\" component={Welcome}></Route>\n            <Route path=\"/links\" component={LinkList}></Route>\n          </Switch>\n        </Router>\n      </div>\n    </ApolloProvider>\n  )\n}\n\nfunction About() {\n  const { loading, error, data } = useQuery(ORDERS_QUERY);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n  console.log(data);\n  var fecha1 = moment('20/06/2020 12:00:00', 'DD/MM/YYYY HH:mm:ss');\n  var fecha2 = moment('25/06/2020 12:00:00', 'DD/MM/YYYY HH:mm:ss');\n  console.log(fecha2.diff(fecha1, 'minutes'));\n  return <h2>About</h2>;\n}\n\nfunction Welcome() {\n  client\n    .query({\n      query: gql`\n        {\n          orders(where: {trade_id: {_eq: 266}}, order_by: {trade_date: asc, time: asc}) {\n            id\n            strike\n            time\n            trade_date\n            call_put\n            action\n            exp_date\n            price\n            is_open\n          }\n        }\n      `\n    })\n    .then(result => console.log(result))\n    .catch(err => console.error(err));\n  return <h2>Welcome</h2>;\n}\n\nfunction About2() {\n  const { loading, error, data } = useQuery(INTRA_DAY_PRICE('700', 'C', '2020-01-30T15:43:08Z', '2020-01-30T15:49:08Z'));\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n    console.log('Data 2', data);\n  return <h2>About2</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}